{"version":3,"file":"static/js/365.be1a040f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactElement/ContactElement.styled.js","components/ContactElement/ContactElement.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  padding: 10px;\n  width: 400px;\n  border: 1px solid black;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  text-align: left;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 24px;\n  font-size: 16px;\n  border-radius: 5px;\n  border: 1px solid black;\n  &:hover,\n  &:focus {\n    color: #c75124;\n    border: 1px solid #c75124;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-right: 10px;\n  border: 1px solid black;\n  border-radius: 5px;\n  color: black;\n  cursor: pointer;\n  display: inline-block;\n  font-family: 'Roboto', sans-serif;\n  font-size: 14px;\n  height: 24px;\n  font-size: 14px;\n  padding: 0 10px;\n  text-align: center;\n  background-color: lightblue;\n\n  &:hover {\n    color: #c75124;\n    border: 1px solid #c75124;\n  }\n`;\n\nexport const Paragraf = styled.p`\n  font-weight: 700;\n  font-size: 30px;\n  line-height: 20px;\n  color: #c75124;\n`;\n\nexport const ContactFormDivision = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ParagrafCreate = styled.p`\n  font-size: 18px;\n  font-weight: 400;\n  margin-top: 0;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (filter === ' ') {\n      return contacts;\n    } else {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n  }\n);\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  Form,\n  Label,\n  Input,\n  Button,\n  ContactFormDivision,\n  ParagrafCreate,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport * as contactsOperations from '../../redux/contacts/operations';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // const { name, number } = event.currentTarget.elements;\n\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      return toast.warning(`${newContact.name} is already in the contact list`);\n    }\n\n    dispatch(contactsOperations.addContact(newContact));\n\n    console.log(newContact);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <ContactFormDivision>\n        <ParagrafCreate>Contact Card</ParagrafCreate>\n\n        <Form onSubmit={handleSubmit}>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n\n          <Label htmlFor=\"number\">Number</Label>\n\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </ContactFormDivision>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  gap: 10px;\n`;\n\nexport const Person = styled.p`\n  display: flex;\n  align-items: center;\n  margin-top: 0;\n  margin-bottom: 8px;\n  color: black;\n\n  svg {\n    display: block;\n    margin-right: 12px;\n  }\n`;","import React from 'react';\nimport { FaPhone } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport { Contact, Person } from './ContactElement.styled';\nimport { Button } from '../ContactForm/ContactForm.styled';\nimport { iconSize } from '../constans';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/operations';\n\nconst ContactElement = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = contactId => {\n    dispatch(contactsOperations.deleteContact(contactId));\n  };\n\n  return (\n    <Contact>\n      <Person>\n        <FaPhone size={iconSize.xs} /> {name} : {number}\n      </Person>\n      <Button type=\"button\" onClick={() => handleDeleteContact(id)}>\n        Delete\n      </Button>\n    </Contact>\n  );\n};\n\nexport default ContactElement;\n\nContactElement.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 400px;\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 5px;\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const Paragraf = styled.p`\n  font-size: 18px;\n  font-weight: 400;\n  margin-top: 0;\n`;\n\nexport const ContactListDivision = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import { useEffect } from 'react';\nimport ContactElement from '../ContactElement';\nimport { List, Paragraf, ContactListDivision } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport * as contactsOperations from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  // console.log(contacts);\n\n  return (\n    <>\n      <ContactListDivision>\n        <Paragraf>My contacts</Paragraf>\n        <List>\n          {visibleContacts.length > 0 ? (\n            visibleContacts.map(({ id, name, number }) => {\n              return (\n                <ContactElement key={id} id={id} name={name} number={number} />\n              );\n            })\n          ) : (\n            <p>Add your first contact! </p>\n          )}\n        </List>\n      </ContactListDivision>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ParagrafCreate = styled.p`\n  font-size: 18px;\n  font-weight: 400;\n  margin-top: 0;\n`;\n","import React from 'react';\nimport { Label, ParagrafCreate } from './Filter.styled';\nimport { Input } from '../ContactForm/ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      <ParagrafCreate>Find Contacts by name</ParagrafCreate>\n      <Input type=\"text\" value={filter} onChange={changeFilter} />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Division = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 30px;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Division } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <Division>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Division>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","Label","Input","Button","ContactFormDivision","ParagrafCreate","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","newContact","id","nanoid","some","toast","contactsOperations","console","log","htmlFor","type","onChange","pattern","title","required","Contact","Person","size","iconSize","onClick","contactId","List","Paragraf","ContactListDivision","visibleContacts","useEffect","length","map","setFilter","Division"],"sourceRoot":""}